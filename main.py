from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import callback_query, CallbackQuery
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.types import Message
from app import keyboard as kb
from app import database as db
from dotenv import load_dotenv
from aiogram.dispatcher.filters import Command
import os
import logging
import sqlite3
from aiogram.types import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import html
import random
import string
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


load_dotenv()
bot = Bot(os.getenv('TOKEN'))
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(f'<a href="https://t.me/CryptoBotRU/14">–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫</a>. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ <a href="https://t.me/CryptoBotRU">–Ω–∞—à –∫–∞–Ω–∞–ª</a> –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ <a href="https://t.me/CryptoBotRussian">–Ω–∞—à —á–∞—Ç</a>.', reply_markup=kb.mainmenu, parse_mode='HTML', disable_web_page_preview=True)

@dp.callback_query_handler(text='wallet')
async def wallet(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''üëõ <b>–ö–æ—à–µ–ª—ë–∫</b>

¬∑ <a href="https://tether.to/">Tether</a>: 0 USDT

¬∑ <a href="https://ton.org/">Toncoin</a>: 0 TON

¬∑ <a href="https://bitcoin.org/">Bitcoin</a>: 0 BTC

¬∑ <a href="https://litecoin.org/">Litecoin</a>: 0 LTC

¬∑ <a href="https://ethereum.org/">Ethereum</a>: 0 ETH

¬∑ <a href="https://binance.org/">Binance Coin</a>: 0 BNB

¬∑ <a href="https://tron.network/">Tron</a>: 0 TRX

¬∑ <a href="https://www.centre.io/usdc">USD Coin</a>: 0 USDC

‚âà 0 BTC''', reply_markup=kb.walletmarkup, parse_mode='HTML', disable_web_page_preview=True)


@dp.callback_query_handler(text='addbal')
async def addbal(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.', reply_markup=kb.addbalwallet)


@dp.callback_query_handler(text='vivod')
async def vivod(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    await bot.send_message(chat_id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.', reply_markup=kb.selladdbalwallet)

@dp.callback_query_handler(text='nazad')
async def nazad(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text=f'<a href="https://t.me/CryptoBotRU/14">–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π –∫—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª–µ–∫</a>. –ü–æ–∫—É–ø–∞–π—Ç–µ, –ø—Ä–æ–¥–∞–≤–∞–π—Ç–µ, —Ö—Ä–∞–Ω–∏—Ç–µ –∏ –ø–ª–∞—Ç–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –∫–æ–≥–¥–∞ —Ö–æ—Ç–∏—Ç–µ.\n\n–ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ <a href="https://t.me/CryptoBotRU">–Ω–∞—à –∫–∞–Ω–∞–ª</a> –∏ –≤—Å—Ç—É–ø–∞–π—Ç–µ –≤ <a href="https://t.me/CryptoBotRussian">–Ω–∞—à —á–∞—Ç</a>.', reply_markup=kb.mainmenu, parse_mode='HTML', disable_web_page_preview=True)

@dp.callback_query_handler(text='notmoney')
async def notmoney(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 4 USDT ($4)
–ö–æ–º–∏—Å—Å–∏—è: 3 USDT ($3).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDT''', disable_notification=False)

@dp.callback_query_handler(text='notmoneyeth')
async def notmoneyeth(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 6.51 USDT ($6.51)
–ö–æ–º–∏—Å—Å–∏—è: 6.5 USDT ($6.50).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDT''', disable_notification=False)

@dp.callback_query_handler(text='notmoneybnb')
async def notmoneybnb(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 2.5 USDT ($2.50)
–ö–æ–º–∏—Å—Å–∏—è: 1.5 USDT ($1.50).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDT''', disable_notification=False)

@dp.callback_query_handler(text='notmoneyton')
async def notmoneyton(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 0.1005 TON ($0.21)
–ö–æ–º–∏—Å—Å–∏—è: 0.1 TON ($0.21).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 TON''', disable_notification=False)

@dp.callback_query_handler(text='notmoneybtc')
async def notmoneybtc(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 0.0013 BTC ($44.99)
–ö–æ–º–∏—Å—Å–∏—è: 0.0003 BTC ($10.38).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 BTC''', disable_notification=False)

@dp.callback_query_handler(text='notmoneyltc')
async def notmoneyltc(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 0.015 LTC ($1.04)
–ö–æ–º–∏—Å—Å–∏—è: 0.005 LTC ($0.35).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 LTC''', disable_notification=False)

@dp.callback_query_handler(text='notmoneyeth')
async def notmoneyeth(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 0.0035 ETH ($6.36)
–ö–æ–º–∏—Å—Å–∏—è: 0.0025 ETH ($4.54).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 ETH''', disable_notification=False)

@dp.callback_query_handler(text='notmoneybnb')
async def notmoneybnb(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 0.0055 BNB ($1.25)
–ö–æ–º–∏—Å—Å–∏—è: 0.0045 BNB ($1.03).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 BNB''', disable_notification=False)

@dp.callback_query_handler(text='notmoneytron')
async def notmoneytron(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 25 TRX ($2.38)
–ö–æ–º–∏—Å—Å–∏—è: 5 TRX ($0.48).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 TRX''', disable_notification=False)

@dp.callback_query_handler(text='ethcoin')
async def notmoneytron(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 6.51 USDC ($6.51)
–ö–æ–º–∏—Å—Å–∏—è: 6.5 USDC ($6.50).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDC''', disable_notification=False)

@dp.callback_query_handler(text='bnbcoin')
async def bnbcoin(callback_query: types.CallbackQuery):
    await bot.send_message(chat_id=callback_query.message.chat.id, text='''üòî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç.

–ú–∏–Ω–∏–º—É–º: 1.51 USDC ($1.51)
–ö–æ–º–∏—Å—Å–∏—è: 1.5 USDC ($1.50).

–í–∞—à –±–∞–ª–∞–Ω—Å: 0 USDC''', disable_notification=False)

@dp.callback_query_handler(text='vivodback')
async def vivodback(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.', reply_markup=kb.selladdbalwallet)

@dp.callback_query_handler(text='selladdbal1')
async def selladdbal1(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ USDT.', reply_markup=kb.selltether)

@dp.callback_query_handler(text='selladdbal2')
async def selladdbal2(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TON.', reply_markup=kb.sellton)

@dp.callback_query_handler(text='selladdbal3')
async def selladdbal3(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ BTC.', reply_markup=kb.sellbtc)

@dp.callback_query_handler(text='selladdbal4')
async def selladdbal4(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ LTC.', reply_markup=kb.sellltc)

@dp.callback_query_handler(text='selladdbal5')
async def selladdbal5(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ETH.', reply_markup=kb.selleth)

@dp.callback_query_handler(text='selladdbal6')
async def selladdbal6(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ BNB.', reply_markup=kb.sellbnb)

@dp.callback_query_handler(text='selladdbal7')
async def selladdbal7(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ TRX.', reply_markup=kb.selltron)

@dp.callback_query_handler(text='selladdbal8')
async def selladdbal8(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ USDC.', reply_markup=kb.sellusdc)

@dp.callback_query_handler(text='commisia')
async def commisia(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.', reply_markup=kb.comisiamarkup)


@dp.callback_query_handler(text='comisia1')
async def commisia1(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è USDT.', reply_markup=kb.tethermark)

@dp.callback_query_handler(text='troncom')
async def troncom(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>USDTM</b> –≤ —Å–µ—Ç–∏ <b>TRON</b> ‚Äì <b>TRC20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>3 USDT</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>1 USDT</b>''', reply_markup=kb.nazadcomark, parse_mode='HTML')

@dp.callback_query_handler(text='ethcom')
async def ethcom(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>USDT</b> –≤ —Å–µ—Ç–∏ <b>Ethereum</b> ‚Äì <b>ERC20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>6.5 USDT</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.01 USDT</b>''', reply_markup=kb.nazadcomark, parse_mode='HTML')

@dp.callback_query_handler(text='bnbcom')
async def bnbcom(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>USDT</b> –≤ —Å–µ—Ç–∏ <b>BNB Smart Chain</b> ‚Äì <b>BEP20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>1.5 USDT</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>1 USDT</b>''', reply_markup=kb.nazadcomark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia2')
async def comisia2(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>TON</b> –≤ —Å–µ—Ç–∏ <b>The Open Network</b> ‚Äì <b>TON.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.1 TON</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.0005 TON</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia3')
async def comisia3(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>BTC</b> –≤ —Å–µ—Ç–∏ <b>Bitcoin</b> ‚Äì <b>BTC.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.0003 BTC</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –æ—Ç <b>0.00002 BTC</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.001 BTC –¥–æ 25 BTC</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia4')
async def comisia4(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>LTC</b> –≤ —Å–µ—Ç–∏ <b>Litecoin</b> ‚Äì <b>LTC.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.005 LTC</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: –æ—Ç <b>0.0001 LTC</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.01 LTC –¥–æ 3,000 LTC</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')


@dp.callback_query_handler(text='comisia5')
async def comisia6(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>ETH</b> –≤ —Å–µ—Ç–∏ <b>Ethereum</b> ‚Äì <b>ERC20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.0025 ETH</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.001 ETH</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia6')
async def comisia7(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>BNB</b> –≤ —Å–µ—Ç–∏ <b>BNB Smart Chain</b> ‚Äì <b>BEP20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.0045 BNB</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.001 BNB</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia7')
async def comisia7(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>BNB</b> –≤ —Å–µ—Ç–∏ <b>BNB Smart Chain</b> ‚Äì <b>BEP20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>0.0045 BNB</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.001 BNB</b>''', reply_markup=kb.nazadcommark, parse_mode='HTML')

@dp.callback_query_handler(text='comisia8')
async def comisia8(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è USDC.''', reply_markup=kb.nextcommark)

@dp.callback_query_handler(text='ethereums')
async def comisia8(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>USDC</b> –≤ —Å–µ—Ç–∏ <b>Ethereum</b> ‚Äì <b>ERC20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>6.5 USDC</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.01 USDC</b>''', reply_markup=kb.nazadnextmark, parse_mode='HTML')

@dp.callback_query_handler(text='bnbsmartch')
async def comisia8(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–º–∏—Å—Å–∏–π –∏ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è –º–æ–Ω–µ—Ç—ã <b>USDC</b> –≤ —Å–µ—Ç–∏ <b>BNB Smart Chain ‚Äì BEP20.</b>

–ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—ã–≤–æ–¥: <b>1.5 USDC</b>

<b>–õ–∏–º–∏—Ç—ã:</b>
–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: <b>–±–µ–∑–ª–∏–º–∏—Ç</b>
–í—ã–≤–æ–¥: –æ—Ç <b>0.01 USDC</b>''', reply_markup=kb.nazadnextmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal1')
async def buy1(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDT.''', reply_markup=kb.buymark)

@dp.callback_query_handler(text='buytron')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>USDT</b>
–°–µ—Ç—å: <b>TRON ‚Äì TRC20</b> ‚ÄºÔ∏è

TTiGRxD3bvU3wvPEUxVUcwLELofHGqLdy9 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT —á–µ—Ä–µ–∑ —Å–µ—Ç—å TRON, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='buyeth')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>USDT</b>
–°–µ—Ç—å: <b>Ethereum ‚Äì ERC20</b> ‚ÄºÔ∏è

0x075E9573d3A31ff6ca625215C0f2a1f7214d2740 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT —á–µ—Ä–µ–∑ —Å–µ—Ç—å Ethereum, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='buybnb')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>USDT</b>
–°–µ—Ç—å: <b>BNB Smart Chain ‚Äì BEP20</b> ‚ÄºÔ∏è

0x6a215917DA14355d9791Df22C2d7cc308AC2f85a 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDT —á–µ—Ä–µ–∑ —Å–µ—Ç—å BNB Smart Chain, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal2')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>TON</b>
–°–µ—Ç—å: <b>The Open Network ‚Äì TON</b> ‚ÄºÔ∏è

EQBnC_js0Lei8ovy89uSBuHMLjbylDqtegKrx7yPpn266qTW 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ TON —á–µ—Ä–µ–∑ —Å–µ—Ç—å The Open Network, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal3')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>BTC</b>
–°–µ—Ç—å: <b>Bitcoin ‚Äì BTC</b> ‚ÄºÔ∏è

bc1q54lxqscz2crcn2wzrldkarquuwdfnqw0faejq9 

–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.00002 BTC

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ BTC —á–µ—Ä–µ–∑ —Å–µ—Ç—å Bitcoin, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.00002 BTC –∏–ª–∏ –±–æ–ª—å—à–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal4')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>LTC</b>
–°–µ—Ç—å: <b>Litecoin ‚Äì LTC</b> ‚ÄºÔ∏è

ltc1qxmnk32xn4j0hgde4mujnqmtwehn6xaalquwqp7 

–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 0.0001 LTC

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ LTC —á–µ—Ä–µ–∑ —Å–µ—Ç—å Litecoin, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ 0.0001 LTC –∏–ª–∏ –±–æ–ª—å—à–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal5')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>ETH</b>
–°–µ—Ç—å: <b>Ethereum ‚Äì ERC20</b> ‚ÄºÔ∏è

0x075E9573d3A31ff6ca625215C0f2a1f7214d2740 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ ETH —á–µ—Ä–µ–∑ —Å–µ—Ç—å Ethereum, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal6')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>BNB</b>
–°–µ—Ç—å: <b>BNB Smart Chain ‚Äì BEP20</b> ‚ÄºÔ∏è

0x6a215917DA14355d9791Df22C2d7cc308AC2f85a 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ BNB —á–µ—Ä–µ–∑ —Å–µ—Ç—å BNB Smart Chain, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal7')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>TRX</b>
–°–µ—Ç—å: <b>TRON ‚Äì TRC20</b> ‚ÄºÔ∏è

TTiGRxD3bvU3wvPEUxVUcwLELofHGqLdy9 

–ú–∏–Ω. —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 10 TRX

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ TRX —á–µ—Ä–µ–∑ —Å–µ—Ç—å TRON, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã. –í—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 TRX –∏–ª–∏ –±–æ–ª—å—à–µ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='addbal8')
async def addbal8(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ç—å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ USDC.''', reply_markup=kb.buynextcommark)

@dp.callback_query_handler(text='buyethereums')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>USDC</b>
–°–µ—Ç—å: <b>Ethereum ‚Äì ERC20</b> ‚ÄºÔ∏è

0x075E9573d3A31ff6ca625215C0f2a1f7214d2740 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDC —á–µ—Ä–µ–∑ —Å–µ—Ç—å Ethereum, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='buybnbsmartch')
async def buytron(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–¥—Ä–µ—Å –Ω–∏–∂–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.

–ú–æ–Ω–µ—Ç–∞: <b>USDC</b>
–°–µ—Ç—å: <b>BNB Smart Chain ‚Äì BEP20</b> ‚ÄºÔ∏è

0x6a215917DA14355d9791Df22C2d7cc308AC2f85a 

‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ USDC —á–µ—Ä–µ–∑ —Å–µ—Ç—å BNB Smart Chain, –∏–Ω–∞—á–µ –º–æ–Ω–µ—Ç—ã –±—É–¥—É—Ç —É—Ç–µ—Ä—è–Ω—ã.''', reply_markup=kb.backmark, parse_mode='HTML')

@dp.callback_query_handler(text='editmonet')
async def editmonet(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(text='''–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.''', reply_markup=kb.addbalwallet, parse_mode='HTML')

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)